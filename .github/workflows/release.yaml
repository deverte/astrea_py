name: "release"

on:
  push:
    tags: ["v*"]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # os: [ubuntu-latest, macos-latest, windows-latest]
        # python-version: ["3.10", "3.11", "3.12", "3.13"]
        os: [ubuntu-latest]
        python-version: ["3.10"]
    steps:
      - uses: actions/checkout@v4

      - uses: extractions/setup-just@v3

      - name: Install CMake
        shell: bash
        run: |
          if [[ "$RUNNER_OS" == "Linux" ]]; then
            sudo apt-get update
            sudo apt-get install -y cmake
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            brew install cmake
          elif [[ "$RUNNER_OS" == "Windows" ]]; then
            choco install cmake -y
          fi

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Python packages
        run: |
          python3 -m pip install --upgrade \
            build \
            ninja \
            pip \
            pybind11 \
            twine \
            wheel

      - name: Install Astrea
        run: |
          git clone --branch v0.8.0 https://github.com/deverte/astrea # managed by justfile
          mkdir astrea/build
          cd astrea/build; \
            cmake -G Ninja -DCMAKE_INSTALL_PREFIX=../install ..; \
            ninja install

      - name: Install Eigen
        shell: bash
        run: |
          EIGEN_PATH="/usr/local/include/eigen3"
          if [[ "$RUNNER_OS" == "Linux" ]]; then
            sudo apt-get update
            sudo apt-get install -y libeigen3-dev
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            brew install eigen
          elif [[ "$RUNNER_OS" == "Windows" ]]; then
            choco install eigen --version 3.4.0 -y
          fi

      - name: Build wheel
        shell: bash
        run: |
          # configure
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            EIGEN_PATH="C:/Program Files/eigen3"
            PYTHON_PATH=$(python3 -c "import sys; print(sys.prefix.replace('\\', '/'))")
          else
            EIGEN_PATH="/usr/local/include/eigen3"
            PYTHON_PATH=$(python3 -c "import sys; print(sys.prefix)")
          fi
          PYBIND11_PATH=$(python3 -c "import pybind11; print(pybind11.get_cmake_dir())")

          mkdir -p build
          cd build; \
            cmake .. \
              -G Ninja \
              -DCMAKE_PREFIX_PATH="$GITHUB_WORKSPACE/astrea/install;$EIGEN_PATH;$PYTHON_PATH;$PYBIND11_PATH"; \
            cd ..

          just build

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          path: dist/*.whl

      - name: Publish to PyPI
        if: success()
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          python -m twine upload --skip-existing dist/*
