name: "release"

on:
  push:
    tags: ["v*"]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        # os: [ubuntu-latest, macos-latest, windows-latest]
        # python-version: ["3.10", "3.11", "3.12", "3.13"]
        os: [ubuntu-latest]
        python-version: ["3.13"]

    steps:
      - uses: actions/checkout@v4

      - uses: extractions/setup-just@v3

      - name: Install build tools
        shell: bash
        run: |
          if [[ "$RUNNER_OS" == "Linux" ]]; then
            sudo apt-get update
            sudo apt-get install -y \
              cmake \
              ninja-build
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            brew install \
              cmake \
              ninja
          elif [[ "$RUNNER_OS" == "Windows" ]]; then
            choco install -y \
              cmake \
              ninja
          fi

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Python packages
        shell: bash
        run: |
          python3 -m pip install --upgrade \
            build \
            pip \
            pybind11 \
            twine

      - name: Install Eigen
        shell: bash
        run: |
          if [[ "$RUNNER_OS" == "Linux" ]]; then
            sudo apt-get update
            sudo apt-get install -y libeigen3-dev=3.4.0
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            brew install eigen
          elif [[ "$RUNNER_OS" == "Windows" ]]; then
            choco install -y eigen --version 3.4.0
          fi

      - name: Install Astrea
        shell: bash
        run: |
          git clone --branch v0.8.0 https://github.com/deverte/astrea # managed by justfile
          mkdir -p astrea/build
          cd astrea/build
            cmake .. -G Ninja
            if [[ "$RUNNER_OS" == "Linux" ]]; then
              ninja install
            elif [[ "$RUNNER_OS" == "macOS" ]]; then
              sudo ninja install
            elif [[ "$RUNNER_OS" == "Windows" ]]; then
              ninja install
            fi
            cd ..

      - name: Build wheel
        shell: bash
        run: |
          if [[ "$RUNNER_OS" == "Linux" ]]; then
            export Eigen3_INCLUDE_DIRS="/usr/local/include/eigen3"
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            export Eigen3_INCLUDE_DIRS="/opt/homebrew/Cellar/eigen/3.4.0_1/include/eigen3"
          elif [[ "$RUNNER_OS" == "Windows" ]]; then
            # export Eigen3_INCLUDE_DIRS="/opt/homebrew/Cellar/eigen/3.4.0_1/include/eigen3"
          fi
          PYBIND11_PATH=$(python3 -c "import pybind11; print(pybind11.get_cmake_dir())")

          ls -al $Eigen3_INCLUDE_DIRS

          mkdir -p build
          cd build && \
            cmake .. \
              -G Ninja \
              -DCMAKE_PREFIX_PATH="$PYBIND11_PATH" && \
            cmake --build . && \
            cd ..

          python3 -m build --no-isolation --wheel

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          path: ./dist/*.whl

      # - name: Publish to PyPI
      #   if: success()
      #   env:
      #     TWINE_USERNAME: __token__
      #     TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      #   run: |
      #     python -m twine upload --skip-existing wheelhouse/*.whl
