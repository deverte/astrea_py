name: "release"

on:
  push:
    tags: ["v*"]

jobs:
  # build-linux:
  #   strategy:
  #     matrix:
  #       os:
  #         - ubuntu-latest
  #       python-version:
  #         - "3.13"
  #         - "3.12"
  #         - "3.11"
  #         - "3.10"
  #       manylinux:
  #         - image: "manylinux_2_34_x86_64"
  #           docker: "linux/amd64"
  #         - image: "manylinux_2_34_i686"
  #           docker: "linux/386"
  #           qemu: "i386"
  #         - image: "manylinux_2_34_aarch64"
  #           docker: "linux/arm64"
  #           qemu: "arm64"
  #         - image: "manylinux_2_28_x86_64"
  #           docker: "linux/amd64"
  #         - image: "manylinux_2_28_i686"
  #           docker: "linux/386"
  #           qemu: "i386"
  #         - image: "manylinux_2_28_aarch64"
  #           docker: "linux/arm64"
  #           qemu: "arm64"
  #         - image: "manylinux2014_x86_64"
  #           docker: "linux/amd64"
  #         - image: "manylinux2014_i686"
  #           docker: "linux/386"
  #           qemu: "i386"
  #         - image: "manylinux2014_aarch64"
  #           docker: "linux/arm64"
  #           qemu: "arm64"

  #   runs-on: ${{ matrix.os }}

  #   steps:
  #     - uses: actions/checkout@v4

  #     - uses: docker/setup-qemu-action@v3
  #       if: matrix.manylinux.qemu
  #       with:
  #         platforms: ${{ matrix.manylinux.qemu }}

  #     - name: Set up Python
  #       uses: actions/setup-python@v5
  #       with:
  #         python-version: ${{ matrix.python-version }}

  #     - name: Install Python packages
  #       shell: bash
  #       run: |
  #         python3 -m pip install --upgrade \
  #           pip \
  #           twine

  #     - name: Build wheel (Linux)
  #       shell: bash
  #       env:
  #         PYTHON_VERSION: ${{ matrix.python-version }}
  #       run: |
  #         docker run \
  #           --platform ${{ matrix.manylinux.docker }} \
  #           --rm \
  #           -v $(pwd):/io \
  #           -e PYTHON_VERSION=${PYTHON_VERSION} \
  #           -e Eigen3_INCLUDE_DIRS=${Eigen3_INCLUDE_DIRS} \
  #           quay.io/pypa/${{ matrix.manylinux.image }} \
  #             bash -c "
  #               export CP=cp\${PYTHON_VERSION//./}
  #               export Eigen3_INCLUDE_DIRS=\"/usr/local/include/eigen3\"
  #               export PYTHON=\"/opt/python/\${CP}-\${CP}/bin/python\"

  #               \${PYTHON} -m pip install \
  #                 auditwheel \
  #                 build \
  #                 ninja \
  #                 pybind11 \
  #                 setuptools

  #               export PATH="\${PATH}:/opt/python/\${CP}-\${CP}/bin"
  #               export PYBIND11_PATH=\$(
  #                 \${PYTHON} -c \
  #                   \"import pybind11; print(pybind11.get_cmake_dir())\"
  #               )

  #               git clone --branch 3.4.0 https://gitlab.com/libeigen/eigen && \
  #               mkdir eigen/build && \
  #               cd eigen/build && \
  #                 cmake .. -G Ninja && \
  #                 ninja install && \
  #                 cd ..

  #               git clone --branch v0.8.0 https://github.com/deverte/astrea # managed by justfile
  #               mkdir -p astrea/build && \
  #               cd astrea/build && \
  #                 cmake .. -G Ninja && \
  #                 ninja install && \
  #                 cd ..

  #               cd /io && \
  #                 mkdir -p build && \
  #                 cd build && \
  #                   cmake .. \
  #                     -G Ninja \
  #                     -DCMAKE_PREFIX_PATH=\"\${PYBIND11_PATH}\" && \
  #                   cmake --build . && \
  #                   cd ..; \
  #                 \
  #                 mkdir -p /dist && \
  #                 \${PYTHON} -m build --no-isolation --wheel --outdir /dist && \
  #                 \${PYTHON} -m auditwheel repair /dist/*.whl -w ./wheelhouse
  #             "

  #     - name: Upload artifact
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: wheels-${{ matrix.os }}-${{ matrix.python-version }}-${{ matrix.manylinux.image }}
  #         path: ./wheelhouse/*.whl

  #     - name: Publish to PyPI
  #       if: success()
  #       env:
  #         TWINE_USERNAME: __token__
  #         TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
  #       run: |
  #         python -m twine upload --skip-existing wheelhouse/*.whl

  # build-macos:
  #   strategy:
  #     matrix:
  #       os:
  #         - macos-latest # arm64
  #         - macos-13 # x86-64
  #       python-version:
  #         - "3.13"
  #         - "3.12"
  #         - "3.11"
  #         - "3.10"

  #   runs-on: ${{ matrix.os }}

  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Set up Python
  #       uses: actions/setup-python@v5
  #       with:
  #         python-version: ${{ matrix.python-version }}

  #     - name: Install build tools
  #       shell: bash
  #       run: |
  #         brew install \
  #           cmake \
  #           ninja

  #     - name: Install Python packages
  #       shell: bash
  #       run: |
  #         python3 -m pip install --upgrade \
  #           build \
  #           pip \
  #           pybind11 \
  #           setuptools \
  #           twine

  #     - name: Install Eigen
  #       shell: bash
  #       run: |
  #         brew install eigen

  #     - name: Install Astrea
  #       shell: bash
  #       run: |
  #         git clone --branch v0.8.0 https://github.com/deverte/astrea # managed by justfile
  #         mkdir -p astrea/build && \
  #         cd astrea/build && \
  #           cmake .. -G Ninja && \
  #           sudo ninja install && \
  #           cd ..

  #     - name: Build wheel (macos arm64)
  #       if: matrix.os == 'macos-latest'
  #       shell: bash
  #       run: |
  #         export Eigen3_INCLUDE_DIRS="/opt/homebrew/Cellar/eigen/3.4.0_1/include/eigen3"
  #         export PYBIND11_PATH=$(python3 -c "import pybind11; print(pybind11.get_cmake_dir())")

  #         mkdir -p build && \
  #         cd build && \
  #           cmake .. \
  #             -G Ninja \
  #             -DCMAKE_PREFIX_PATH="$PYBIND11_PATH" && \
  #           cmake --build . && \
  #           cd ..

  #         python3 -m build --no-isolation --wheel --outdir ./wheelhouse

  #     - name: Build wheel (macos x86-64)
  #       if: matrix.os == 'macos-13'
  #       shell: bash
  #       run: |
  #         export Eigen3_INCLUDE_DIRS="/usr/local/Cellar/eigen/3.4.0_1/include/eigen3"
  #         export PYBIND11_PATH=$(python3 -c "import pybind11; print(pybind11.get_cmake_dir())")

  #         mkdir -p build && \
  #         cd build && \
  #           cmake .. \
  #             -G Ninja \
  #             -DCMAKE_PREFIX_PATH="$PYBIND11_PATH" && \
  #           cmake --build . && \
  #           cd ..

  #         python3 -m build --no-isolation --wheel --outdir ./wheelhouse

  #     - name: Upload artifact
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: wheels-${{ matrix.os }}-${{ matrix.python-version }}
  #         path: ./wheelhouse/*.whl

  #     - name: Publish to PyPI
  #       if: success()
  #       env:
  #         TWINE_USERNAME: __token__
  #         TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
  #       run: |
  #         python -m twine upload --skip-existing wheelhouse/*.whl

  build-windows:
    strategy:
      matrix:
        os:
          # - windows-latest
          - windows-11-arm
        python-version:
          - "3.13"
          # - "3.12"
          # - "3.11"
          # - "3.10"
        exclude:
          - os: windows-11-arm
            python-version: "3.10"

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install build tools
        shell: bash
        run: |
          choco install -y cmake

      - name: Install Python packages
        shell: bash
        run: |
          python3 -m pip install --upgrade \
            build \
            pip \
            pybind11 \
            setuptools \
            twine

      - name: Install Eigen
        shell: bash
        run: |
          choco install -y eigen --version 3.4.0

      - name: Install Astrea
        shell: bash
        run: |
          git clone --branch v0.8.0 https://github.com/deverte/astrea # managed by justfile
          mkdir -p astrea/build && \
          cd astrea/build && \
            cmake .. -G "Visual Studio 17 2022" && \
            cmake --install . && \
            cd ..

      - name: Build wheel
        shell: bash
        run: |
          export astrea_INCLUDE_DIRS="C:/PROGRA~2/astrea/include"
          export Eigen3_INCLUDE_DIRS="C:/ProgramData/chocolatey/lib/eigen/include/eigen3"
          export PYBIND11_PATH=$(
            python3 -c "import pybind11; print(pybind11.get_cmake_dir())"
          )

          mkdir -p build && \
          cd build && \
            cmake .. \
              -G "Visual Studio 17 2022" \
              -DCMAKE_CXX_STANDARD=17 \
              -DCMAKE_CXX_FLAGS="-I$astrea_INCLUDE_DIRS" \
              -DCMAKE_PREFIX_PATH="$PYBIND11_PATH" && \
            cmake --build . && \
            cd ..

          python3 -m build --no-isolation --wheel --outdir ./wheelhouse

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}-${{ matrix.python-version }}
          path: ./wheelhouse/*.whl

      - name: Publish to PyPI
        if: success()
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          python -m twine upload --skip-existing wheelhouse/*.whl
